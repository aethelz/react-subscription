{"version":3,"sources":["state/hooks.ts","shared/CONSTANTS.ts","state/stateSlice.ts","shared/usePrice.ts","shared/api.ts","SelectedPlan/Container/index.tsx","SelectedPlan/Placeholder/index.tsx","SelectedPlan/index.tsx","Selection/Options/index.tsx","Selection/index.tsx","Payment/Paycard/components/form/index.jsx","Payment/Paycard/components/card/index.jsx","Payment/Paycard/index.tsx","shared/utils.ts","Payment/index.tsx","state/store.ts","Confirmation/nextButtonContent.tsx","Confirmation/usePost.ts","Confirmation/index.tsx","CurrentStage/index.tsx","Navigation/index.tsx","App.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","durationOptions","gbSizeOptions","defaultPaymentData","cardNumber","cardMonth","cardYear","cardCvv","initialState","stage","subscriptionData","duration","gbSize","upfrontPayment","paymentData","confirmationData","sunscriptionSlice","createSlice","name","reducers","nextStage","state","console","log","previousStage","fillSubscriptionData","action","payload","fillPaymentData","fillConfirmationData","actions","selectConfirmationData","subscription","selectSubscriptionData","selectStage","selectPaymentData","usePrice","settings","useState","prices","setPrices","useEffect","fetch","then","res","json","discount","pricePerGb","subscription_plans","find","v","duration_months","price_usd_per_gb","totalPrice","Container","children","className","Placeholder","text","Confirmation","priceSummary","style","color","Options","values","selected","onChange","unit","map","value","idx","classNames","onClick","Selection","navigation","dispatch","planData","setDuration","setGbSize","setUpfrontPayment","type","checked","currentTarget","currentYear","Date","getFullYear","monthsArr","Array","from","length","x","i","month","yearsArr","_x","CForm","onUpdateState","cardNumberRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvvRef","_cardNumber","_cardCvv","setCardNumber","setCardCvv","handleFormChange","event","target","htmlFor","autoComplete","replace","test","trimRight","maxLength","ref","onFocus","e","onBlur","disabled","val","index","sanitizedCvv","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","cardHolderRef","setStyle","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","element","current","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","alt","src","TransitionGroup","component","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","timeout","SwitchTransition","in-out","out-in","toString","substr","MainScreen","setState","setCurrentFocusedElm","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","key","focus","cardElementsRef","_event","inputName","cardDataToInternal","data","Payment","initialInternalState","formFilled","startsWith","every","Boolean","Paycard","onNext","store","configureStore","reducer","subscriptionReducer","nextButtonContent","nextButtonDone","nextButtonFail","usePost","isLoading","setIsLoading","isFailed","setIsFailed","isSuccess","setIsSuccess","post","method","headers","Accept","body","JSON","stringify","catch","finally","emailRef","emailValid","setEmailValid","termsAgreement","setTermsAgreement","email","setEmail","checkValidity","placeholder","size","required","href","onPrevious","nextButtonLoading","getState","CurrentStage","defaultNextContent","Navigation","App","SelectedPlan","props","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.359f89cf.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import type { SubscriptionSettings, CardData } from './types';\n\nconst defaultSubscriptionSettings: SubscriptionSettings = {\n  duration: 12,\n  gbSize: 5,\n  upfrontPayment: false,\n};\n\nconst durationOptions = [3, 6, 12];\nconst gbSizeOptions = [5, 10, 50];\n\nconst defaultPaymentData: CardData = {\n  cardNumber: '#### #### #### ####',\n  cardMonth: '',\n  cardYear: '',\n  cardCvv: '',\n};\n\nexport {\n  defaultSubscriptionSettings,\n  defaultPaymentData,\n  durationOptions,\n  gbSizeOptions,\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../state/store';\nimport type {\n  State,\n  SubscriptionSettings,\n  ConfirmationSettings,\n  CardData,\n} from '../shared/types';\nimport { defaultSubscriptionSettings } from '../shared/CONSTANTS';\n\nconst initialState: State = {\n  stage: 'selection',\n  subscriptionData: defaultSubscriptionSettings,\n  paymentData: null,\n  confirmationData: null,\n};\n\nexport const sunscriptionSlice = createSlice({\n  name: 'subscription',\n  initialState,\n  reducers: {\n    nextStage: (state) => {\n      switch (state.stage) {\n        case 'selection':\n          state.stage = 'payment';\n          break;\n        case 'payment':\n          if (state.paymentData) {\n            state.stage = 'confirmation';\n          }\n          break;\n        default:\n          console.log('no-op');\n      }\n    },\n    previousStage: (state) => {\n      switch (state.stage) {\n        case 'payment':\n          state.stage = 'selection';\n          break;\n        case 'confirmation':\n          state.stage = 'payment';\n          break;\n        default:\n          console.log('no-op');\n      }\n    },\n    fillSubscriptionData: (\n      state,\n      action: PayloadAction<SubscriptionSettings>,\n    ) => {\n      state.subscriptionData = action.payload;\n    },\n    fillPaymentData: (state, action: PayloadAction<CardData>) => {\n      state.paymentData = action.payload;\n    },\n    fillConfirmationData: (\n      state,\n      action: PayloadAction<ConfirmationSettings>,\n    ) => {\n      state.confirmationData = action.payload;\n    },\n  },\n});\n\nexport const {\n  nextStage,\n  previousStage,\n  fillSubscriptionData,\n  fillPaymentData,\n  fillConfirmationData,\n} = sunscriptionSlice.actions;\n\nexport const selectConfirmationData = (state: RootState) =>\n  state.subscription.confirmationData;\nexport const selectSubscriptionData = (state: RootState) =>\n  state.subscription.subscriptionData;\nexport const selectStage = (state: RootState) => state.subscription.stage;\nexport const selectPaymentData = (state: RootState) =>\n  state.subscription.paymentData;\n\nexport default sunscriptionSlice.reducer;\n","import { useEffect, useState } from 'react';\nimport type { SubscriptionPlans, SubscriptionSettings } from './types';\nimport { fetchPrices } from './api';\n\ntype HookReturn = {\n  totalPrice: number;\n  pricePerGb: number;\n} | null;\nexport default function usePrice(\n  settings: SubscriptionSettings | null,\n): HookReturn {\n  const [prices, setPrices] = useState<null | SubscriptionPlans>(null);\n  useEffect(() => {\n    fetchPrices().then((res) => setPrices(res));\n  }, []);\n\n  if (!settings) {\n    return null;\n  }\n  const { duration, gbSize, upfrontPayment } = settings;\n  const discount = upfrontPayment ? 0.1 : 0;\n\n  if (!prices) {\n    return null;\n  } else {\n    const pricePerGb = prices.subscription_plans.find(\n      (v) => v.duration_months === duration,\n    )?.price_usd_per_gb;\n\n    if (!pricePerGb) return null;\n\n    const totalPrice = pricePerGb * gbSize * duration * (1 - discount);\n\n    return { totalPrice, pricePerGb };\n  }\n}\n","import type { SubscriptionPlans, State } from './types';\nimport { mockResponse } from './mocks';\n\nexport const fetchPrices = () =>\n  fetch('https://cloud-storage-prices-moberries.herokuapp.com/prices').then(\n    (res) => res.json() as Promise<SubscriptionPlans>,\n  );\n\nexport const postData = (state: State) =>\n  fetch('https://httpbin.org/post', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(state),\n  }).then((res) => res.json() as Promise<any>);\n\nexport const mockPrices = () => Promise.resolve(mockResponse);\n","import type { PropsWithChildren } from 'react';\n\ntype Props = PropsWithChildren<{}>;\nconst Container = ({ children }: Props) => {\n  return (\n    <div className=\"my-5 box has-background-info-light\">\n      <div className=\"has-text-centered\">\n        <h3 className=\"title is-3 mb-4\">Order Summary</h3>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default Container;\n","import Container from '../Container';\n\ntype Props = {\n  text: string;\n};\nconst Placeholder = ({ text }: Props) => {\n  return (\n    <Container>\n      <div className=\"has-text-centered\">\n        <h4 className=\"title is-4\">{text}</h4>\n      </div>\n    </Container>\n  );\n};\n\nexport default Placeholder;\n","import { useAppSelector } from '../state/hooks';\nimport { selectSubscriptionData } from '../state/stateSlice';\nimport usePrice from '../shared/usePrice';\nimport Container from './Container';\nimport Placeholder from './Placeholder';\n\nconst Confirmation = () => {\n  const subscriptionData = useAppSelector(selectSubscriptionData);\n  const priceSummary = usePrice(subscriptionData);\n\n  if (!subscriptionData) return <Placeholder text=\"No plan selected!\" />;\n  if (!priceSummary) return <Placeholder text=\"Loading..\" />;\n\n  const { totalPrice, pricePerGb } = priceSummary;\n  const { duration, gbSize, upfrontPayment } = subscriptionData;\n\n  return (\n    <Container>\n      <nav className=\"level\">\n        <div className=\"level-item has-text-centered\">\n          <div>\n            <p className=\"heading\">Storage</p>\n            <p className=\"title\">{gbSize}GB</p>\n          </div>\n        </div>\n        <div className=\"level-item has-text-centered\">\n          <div>\n            <p className=\"heading\">Duration</p>\n            <p className=\"title\">{duration} months</p>\n          </div>\n        </div>\n        <div className=\"level-item has-text-centered\">\n          <div>\n            <p className=\"heading\">Price per GB</p>\n            <p className=\"title\">{pricePerGb}€</p>\n          </div>\n        </div>\n        <div className=\"level-item has-text-centered\">\n          <div>\n            <p className=\"heading\">Total Price</p>\n            <p className=\"title\" style={{ color: upfrontPayment ? 'red' : '' }}>\n              {totalPrice}€\n            </p>\n          </div>\n        </div>\n      </nav>\n    </Container>\n  );\n};\n\nexport default Confirmation;\n","import classNames from 'classnames';\n\ntype Props<T> = {\n  values: T[];\n  selected: T;\n  onChange: (value: T) => void;\n  unit: string;\n};\nconst Options = <T extends unknown>({\n  values,\n  selected,\n  onChange,\n  unit,\n}: Props<T>) => {\n  return (\n    <div className=\"buttons is-justify-content-center\">\n      {values.map((value, idx) => (\n        <button\n          key={idx}\n          className={classNames('button', 'is-rounded', {\n            'is-outline': value !== selected,\n            'is-info': value === selected,\n          })}\n          onClick={() => onChange(value)}\n        >\n          {value} {unit}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Options;\n","import { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport {\n  fillSubscriptionData,\n  selectSubscriptionData,\n} from '../state/stateSlice';\nimport Options from './Options';\nimport type { WithNavigation } from '../shared/types';\nimport { durationOptions, gbSizeOptions } from '../shared/CONSTANTS';\n\ntype Props = {} & WithNavigation;\nconst Selection = ({ navigation }: Props) => {\n  const dispatch = useAppDispatch();\n  const planData = useAppSelector(selectSubscriptionData);\n  const [duration, setDuration] = useState(planData.duration);\n  const [gbSize, setGbSize] = useState(planData.gbSize);\n  const [upfrontPayment, setUpfrontPayment] = useState(planData.upfrontPayment);\n\n  useEffect(() => {\n    dispatch(fillSubscriptionData({ duration, gbSize, upfrontPayment }));\n  }, [dispatch, gbSize, duration, upfrontPayment]);\n  return (\n    <>\n      <Options\n        values={durationOptions}\n        selected={duration}\n        onChange={setDuration}\n        unit=\"months\"\n      />\n      <Options\n        values={gbSizeOptions}\n        selected={gbSize}\n        onChange={setGbSize}\n        unit=\"GB\"\n      />\n\n      <div className=\"has-text-centered\">\n        <label className=\"checkbox\">\n          <input\n            type=\"checkbox\"\n            checked={upfrontPayment}\n            onChange={({ currentTarget: { checked } }) =>\n              setUpfrontPayment(checked)\n            }\n          />\n          <span className=\"title is-5 ml-2\">Pay Upfront</span>\n        </label>\n      </div>\n\n      {navigation({})}\n    </>\n  );\n};\n\nexport default Selection;\n","import { useState } from 'react';\nimport { defaultPaymentData } from '../../../../shared/CONSTANTS';\nimport './styles.scss';\n\nconst currentYear = new Date().getFullYear();\nconst monthsArr = Array.from({ length: 12 }, (x, i) => {\n  const month = i + 1;\n  return month <= 9 ? '0' + month : month;\n});\nconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\n\nexport default function CForm({\n  cardMonth,\n  cardYear,\n  onUpdateState,\n  cardNumberRef,\n  cardDateRef,\n  onCardInputFocus,\n  onCardInputBlur,\n  cardCvvRef,\n  _cardNumber,\n  _cardCvv,\n  children,\n}) {\n  const [cardNumber, setCardNumber] = useState(\n    _cardNumber === defaultPaymentData.cardNumber ? '' : _cardNumber,\n  );\n\n  const [cardCvv, setCardCvv] = useState(_cardCvv);\n\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n\n    onUpdateState(name, value);\n  };\n\n  const onCVVNumberChange = (event) => {\n    let { name, value } = event.target;\n\n    const sanitizedCvv = value.replace(/\\D/g, '')\n    setCardCvv(sanitizedCvv);\n    onUpdateState(name, sanitizedCvv);\n  };\n\n  // TODO: We can improve the regex check with a better approach like in the card component.\n  const onCardNumberChange = (event) => {\n    let { value, name } = event.target;\n    let cardNumber = value;\n    value = value.replace(/\\D/g, '');\n    if (/^3[47]\\d{0,13}$/.test(value)) {\n      cardNumber = value\n        .replace(/(\\d{4})/, '$1 ')\n        .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n    } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n      // diner's club, 14 digits\n      cardNumber = value\n        .replace(/(\\d{4})/, '$1 ')\n        .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n    } else if (/^\\d{0,16}$/.test(value)) {\n      // regular cc number, 16 digits\n      cardNumber = value\n        .replace(/(\\d{4})/, '$1 ')\n        .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n        .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n    }\n\n    setCardNumber(cardNumber.trimRight());\n    onUpdateState(name, cardNumber);\n  };\n\n  const onCvvFocus = (event) => {\n    onUpdateState('isCardFlipped', true);\n  };\n\n  const onCvvBlur = (event) => {\n    onUpdateState('isCardFlipped', false);\n  };\n\n  return (\n    <div className=\"card-form\">\n      <div className=\"card-list\">{children}</div>\n      <div className=\"card-form__inner\">\n        <div className=\"card-input\">\n          <label htmlFor=\"cardNumber\" className=\"card-input__label\">\n            Card Number\n          </label>\n          <input\n            type=\"tel\"\n            name=\"cardNumber\"\n            className=\"card-input__input\"\n            autoComplete=\"off\"\n            onChange={onCardNumberChange}\n            maxLength=\"19\"\n            ref={cardNumberRef}\n            onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\n            onBlur={onCardInputBlur}\n            value={cardNumber}\n          />\n        </div>\n\n        <div className=\"card-form__row\">\n          <div className=\"card-form__col\">\n            <div className=\"card-form__group\">\n              <label htmlFor=\"cardMonth\" className=\"card-input__label\">\n                Expiration Date\n              </label>\n              <select\n                className=\"card-input__input -select\"\n                value={cardMonth}\n                name=\"cardMonth\"\n                onChange={handleFormChange}\n                ref={cardDateRef}\n                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                onBlur={onCardInputBlur}\n              >\n                <option value=\"\" disabled>\n                  Month\n                </option>\n\n                {monthsArr.map((val, index) => (\n                  <option key={index} value={val}>\n                    {val}\n                  </option>\n                ))}\n              </select>\n              <select\n                name=\"cardYear\"\n                className=\"card-input__input -select\"\n                value={cardYear}\n                onChange={handleFormChange}\n                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                onBlur={onCardInputBlur}\n              >\n                <option value=\"\" disabled>\n                  Year\n                </option>\n\n                {yearsArr.map((val, index) => (\n                  <option key={index} value={val}>\n                    {val}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"card-form__col -cvv\">\n            <div className=\"card-input\">\n              <label htmlFor=\"cardCvv\" className=\"card-input__label\">\n                CVV\n              </label>\n              <input\n                type=\"tel\"\n                className=\"card-input__input\"\n                maxLength=\"3\"\n                autoComplete=\"off\"\n                name=\"cardCvv\"\n                onChange={onCVVNumberChange}\n                onFocus={onCvvFocus}\n                onBlur={onCvvBlur}\n                ref={cardCvvRef}\n                value={cardCvv}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect, useMemo } from 'react';\nimport {\n  CSSTransition,\n  TransitionGroup,\n  SwitchTransition,\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n  visa: '^4',\n  amex: '^(34|37)',\n  mastercard: '^5[1-5]',\n  discover: '^6011',\n  unionpay: '^62',\n  troy: '^9792',\n  diners: '^(30[0-5]|36)',\n};\n\nconst cardBackgroundName = () => {\n  let random = Math.floor(Math.random() * 5 + 1);\n  return `${random}.jpeg`;\n};\n\nconst BACKGROUND_IMG = cardBackgroundName();\n\nconst Card = ({\n  cardHolder,\n  cardNumber,\n  cardMonth,\n  cardYear,\n  cardCvv,\n  isCardFlipped,\n  currentFocusedElm,\n  onCardElementClick,\n  cardNumberRef,\n  cardHolderRef,\n  cardDateRef,\n}) => {\n  const [style, setStyle] = useState(null);\n\n  const cardType = (cardNumber) => {\n    const number = cardNumber;\n    let re;\n    for (const [card, pattern] of Object.entries(CARDS)) {\n      re = new RegExp(pattern);\n      if (number.match(re) != null) {\n        return card;\n      }\n    }\n\n    return 'visa'; // default type\n  };\n\n  const useCardType = useMemo(() => {\n    return cardType(cardNumber);\n  }, [cardNumber]);\n\n  const outlineElementStyle = (element) => {\n    return element\n      ? {\n          width: `${element.offsetWidth}px`,\n          height: `${element.offsetHeight}px`,\n          transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`,\n        }\n      : null;\n  };\n\n  useEffect(() => {\n    if (currentFocusedElm) {\n      const style = outlineElementStyle(currentFocusedElm.current);\n      setStyle(style);\n    }\n  }, [currentFocusedElm]);\n\n  const maskCardNumber = (cardNumber) => {\n    let cardNumberArr = cardNumber.split('');\n    cardNumberArr.forEach((val, index) => {\n      if (index > 4 && index < 14) {\n        if (cardNumberArr[index] !== ' ') {\n          cardNumberArr[index] = '*';\n        }\n      }\n    });\n\n    return cardNumberArr;\n  };\n\n  return (\n    <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n      <div className=\"card-item__side -front\">\n        <div\n          className={`card-item__focus ${currentFocusedElm ? `-active` : ``}`}\n          style={style}\n        />\n        <div className=\"card-item__cover\">\n          <img\n            alt=\"\"\n            src={`/card-background/${BACKGROUND_IMG}`}\n            className=\"card-item__bg\"\n          />\n        </div>\n\n        <div className=\"card-item__wrapper\">\n          <div className=\"card-item__top\">\n            <img src=\"/chip.png\" alt=\"\" className=\"card-item__chip\" />\n            <div className=\"card-item__type\">\n              <img\n                alt={useCardType}\n                src={`/card-type/${useCardType}.png`}\n                className=\"card-item__typeImg\"\n              />\n            </div>\n          </div>\n\n          <label\n            className=\"card-item__number\"\n            ref={cardNumberRef}\n            onClick={() => onCardElementClick('cardNumber')}\n          >\n            <TransitionGroup className=\"slide-fade-up\" component=\"div\">\n              {cardNumber ? (\n                maskCardNumber(cardNumber).map((val, index) => (\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={250}\n                    key={index}\n                  >\n                    <div className=\"card-item__numberItem\">{val}</div>\n                  </CSSTransition>\n                ))\n              ) : (\n                <CSSTransition classNames=\"slide-fade-up\" timeout={250}>\n                  <div className=\"card-item__numberItem\">#</div>\n                </CSSTransition>\n              )}\n            </TransitionGroup>\n          </label>\n          <div className=\"card-item__content\">\n            <label\n              className=\"card-item__info\"\n              onClick={() => onCardElementClick('cardHolder')}\n              ref={cardHolderRef}\n            >\n              <div className=\"card-item__holder\">Card Holder</div>\n              <div className=\"card-item__name\">\n                <TransitionGroup component=\"div\" className=\"slide-fade-up\">\n                  {cardHolder === 'FULL NAME' ? (\n                    <CSSTransition classNames=\"slide-fade-up\" timeout={250}>\n                      <div>FULL NAME</div>\n                    </CSSTransition>\n                  ) : (\n                    cardHolder.split('').map((val, index) => (\n                      <CSSTransition\n                        timeout={250}\n                        classNames=\"slide-fade-right\"\n                        key={index}\n                      >\n                        <span className=\"card-item__nameItem\">{val}</span>\n                      </CSSTransition>\n                    ))\n                  )}\n                </TransitionGroup>\n              </div>\n            </label>\n            <div\n              className=\"card-item__date\"\n              onClick={() => onCardElementClick('cardDate')}\n              ref={cardDateRef}\n            >\n              <label className=\"card-item__dateTitle\">Expires</label>\n              <label className=\"card-item__dateItem\">\n                <SwitchTransition in-out>\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={200}\n                    key={cardMonth}\n                  >\n                    <span>{!cardMonth ? 'MM' : cardMonth} </span>\n                  </CSSTransition>\n                </SwitchTransition>\n              </label>\n              /\n              <label htmlFor=\"cardYear\" className=\"card-item__dateItem\">\n                <SwitchTransition out-in>\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={250}\n                    key={cardYear}\n                  >\n                    <span>\n                      {!cardYear ? 'YY' : cardYear.toString().substr(-2)}\n                    </span>\n                  </CSSTransition>\n                </SwitchTransition>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"card-item__side -back\">\n        <div className=\"card-item__cover\">\n          <img\n            alt=\"\"\n            src={`/card-background/${BACKGROUND_IMG}`}\n            className=\"card-item__bg\"\n          />\n        </div>\n        <div className=\"card-item__band\" />\n        <div className=\"card-item__cvv\">\n          <div className=\"card-item__cvvTitle\">CVV</div>\n          <div className=\"card-item__cvvBand\">\n            <TransitionGroup>\n              {cardCvv.split('').map((val, index) => (\n                <CSSTransition\n                  classNames=\"zoom-in-out\"\n                  key={index}\n                  timeout={250}\n                >\n                  <span>*</span>\n                </CSSTransition>\n              ))}\n            </TransitionGroup>\n          </div>\n          <div className=\"card-item__type\">\n            <img\n              alt={useCardType}\n              src={`/card-type/${useCardType}.png`}\n              className=\"card-item__typeImg\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useState, useRef, useCallback } from 'react';\nimport CForm from './components/form';\nimport Card from './components/card';\nimport type { InternalCardData } from '../../shared/types';\n\ntype Props = {\n  state: InternalCardData;\n  setState: (s: InternalCardData) => void;\n  initialState: InternalCardData;\n};\nconst MainScreen = ({ state, setState, initialState }: Props) => {\n  const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\n\n  const updateStateValues = useCallback(\n    (keyName, value) => {\n      setState({\n        ...state,\n        // @ts-ignore\n        [keyName]: value || initialState[keyName],\n      });\n    },\n    [state],\n  );\n\n  // References for the Form Inputs used to focus corresponding inputs.\n  let formFieldsRefObj = {\n    cardNumber: useRef(),\n    cardHolder: useRef(),\n    cardDate: useRef(),\n    cardCvv: useRef(),\n  };\n\n  let focusFormFieldByKey = useCallback((key) => {\n    // @ts-ignore\n    formFieldsRefObj[key].current.focus();\n  }, []);\n\n  // This are the references for the Card DIV elements.\n  let cardElementsRef = {\n    cardNumber: useRef(),\n    cardHolder: useRef(),\n    cardDate: useRef(),\n  };\n\n  // @ts-ignore\n  let onCardFormInputFocus = (_event, inputName) => {\n    // @ts-ignore\n    const refByName = cardElementsRef[inputName];\n    setCurrentFocusedElm(refByName);\n  };\n\n  const onCardInputBlur = useCallback(() => {\n    setCurrentFocusedElm(null);\n  }, []);\n\n  return (\n    <div className=\"wrapper\">\n      <CForm\n        cardMonth={state.cardMonth}\n        cardYear={state.cardYear}\n        _cardNumber={state.cardNumber}\n        _cardCvv={state.cardCvv}\n        onUpdateState={updateStateValues}\n        cardNumberRef={formFieldsRefObj.cardNumber}\n        cardDateRef={formFieldsRefObj.cardDate}\n        cardCvvRef={formFieldsRefObj.cardCvv}\n        onCardInputFocus={onCardFormInputFocus}\n        onCardInputBlur={onCardInputBlur}\n      >\n        <Card\n          cardNumber={state.cardNumber}\n          cardHolder={state.cardHolder}\n          cardMonth={state.cardMonth}\n          cardYear={state.cardYear}\n          cardCvv={state.cardCvv}\n          isCardFlipped={state.isCardFlipped}\n          currentFocusedElm={currentFocusedElm}\n          onCardElementClick={focusFormFieldByKey}\n          cardNumberRef={cardElementsRef.cardNumber}\n          cardHolderRef={cardElementsRef.cardHolder}\n          cardDateRef={cardElementsRef.cardDate}\n        ></Card>\n      </CForm>\n    </div>\n  );\n};\n\nexport default MainScreen;\n","import type { InternalCardData, CardData } from './types';\n\nexport function cardDataToInternal(data: CardData): InternalCardData {\n  return {\n    ...data,\n    cardHolder: 'CARD HOLDER',\n    isCardFlipped: false,\n  };\n}\n","import Paycard from './Paycard';\nimport { useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../state/hooks';\nimport { fillPaymentData, selectPaymentData } from '../state/stateSlice';\nimport type { WithNavigation } from '../shared/types';\nimport { cardDataToInternal } from '../shared/utils';\nimport { defaultPaymentData } from '../shared/CONSTANTS';\n\ntype Props = {} & WithNavigation;\nconst Payment = ({ navigation }: Props) => {\n  const paymentData = useAppSelector(selectPaymentData) ?? defaultPaymentData;\n  const initialInternalState = cardDataToInternal(paymentData);\n  const dispatch = useAppDispatch();\n  const [state, setState] = useState(() => cardDataToInternal(paymentData));\n  const formFilled = [\n    !state.cardNumber.startsWith('#') && state.cardNumber.length === 19,\n    state.cardCvv.length === 3,\n    state.cardYear,\n    state.cardMonth,\n  ].every(Boolean);\n\n  return (\n    <>\n      <Paycard\n        initialState={initialInternalState}\n        state={state}\n        setState={setState}\n      />\n      {navigation({\n        formFilled,\n        onNext: () => dispatch(fillPaymentData(state)),\n      })}\n    </>\n  );\n};\n\nexport default Payment;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport subscriptionReducer from './stateSlice';\n\nexport const store = configureStore({\n  reducer: {\n    subscription: subscriptionReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","export const nextButtonContent = (\n  <>\n    <span>Confirm</span>\n    <span className=\"icon is-small\">\n      <i className=\"far fa-check-circle\"></i>\n    </span>\n  </>\n);\nexport const nextButtonDone = (\n  <>\n    <span>Success!</span>\n    <span className=\"icon is-small\">\n      <i className=\"fas fa-check-circle\"></i>\n    </span>\n  </>\n);\nexport const nextButtonFail = (\n  <>\n    <span>Failed :(</span>\n    <span className=\"icon is-small\">\n      <i className=\"fas fa-times-circle\"></i>\n    </span>\n  </>\n);\n","import { useState } from 'react';\nimport { postData } from '../shared/api';\nimport type { State } from '../shared/types';\nimport {\n  nextButtonContent,\n  nextButtonDone,\n  nextButtonFail,\n} from './nextButtonContent';\n\ntype HookReturn = {\n  isLoading: boolean;\n  isFailed: boolean;\n  isSuccess: boolean;\n  nextButtonContent: JSX.Element;\n  post: (data: State) => void;\n};\nexport default function usePost(): HookReturn {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFailed, setIsFailed] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  return {\n    isLoading,\n    isSuccess,\n    isFailed,\n    nextButtonContent: isSuccess\n      ? nextButtonDone\n      : isFailed\n      ? nextButtonFail\n      : nextButtonContent,\n    post: (data) => {\n      setIsLoading(true);\n      postData(data)\n        .then(() => setIsSuccess(true))\n        .catch(() => setIsFailed(true))\n        .finally(() => setIsLoading(false));\n    },\n  };\n}\n","import classNames from 'classnames';\nimport { useEffect, useState, useRef } from 'react';\nimport { useAppSelector, useAppDispatch } from '../state/hooks';\nimport { store } from '../state/store';\nimport {\n  fillConfirmationData,\n  selectConfirmationData,\n} from '../state/stateSlice';\nimport usePost from './usePost';\nimport type { WithNavigation } from '../shared/types';\n\ntype Props = {} & WithNavigation;\nconst Confirmation = ({ navigation }: Props) => {\n  const emailRef = useRef<HTMLInputElement>(null);\n  const [emailValid, setEmailValid] = useState(false);\n  const { post, isLoading, isSuccess, nextButtonContent } = usePost();\n  const confirmationData = useAppSelector(selectConfirmationData);\n  const dispatch = useAppDispatch();\n  const [termsAgreement, setTermsAgreement] = useState(\n    confirmationData?.termsAgreement ?? true,\n  );\n\n  const [email, setEmail] = useState(confirmationData?.email ?? '');\n  useEffect(() => {\n    if (!emailRef.current) return;\n    setEmailValid(emailRef.current.checkValidity());\n  }, [email]);\n  return (\n    <div>\n      <div className=\"field\">\n        <p className=\"control has-icons-left has-icons-right\">\n          <input\n            className=\"input\"\n            type=\"email\"\n            value={email}\n            placeholder=\"Email\"\n            ref={emailRef}\n            onChange={({ currentTarget: { value } }) => setEmail(value)}\n            size={30}\n            required\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\"></i>\n          </span>\n          <span\n            className={classNames('icon', 'is-small', 'is-right', {\n              'has-text-success': emailValid,\n            })}\n          >\n            <i className=\"fas fa-check\"></i>\n          </span>\n        </p>\n      </div>\n\n      <div className=\"has-text-centered\">\n        <label className=\"checkbox\">\n          <input\n            name=\"termsAgreement\"\n            type=\"checkbox\"\n            checked={termsAgreement}\n            onChange={({ currentTarget: { checked } }) =>\n              setTermsAgreement(checked)\n            }\n          />\n          <span className=\"title is-5 ml-2\">\n            I agree to the <a href=\"#\">terms and conditions</a>\n          </span>\n        </label>\n      </div>\n\n      {navigation({\n        formFilled: termsAgreement && emailValid && !isSuccess,\n        onPrevious: () => {\n          dispatch(fillConfirmationData({ email, termsAgreement }));\n        },\n        nextButtonContent,\n        nextButtonLoading: isLoading,\n        onNext: () => {\n          dispatch(fillConfirmationData({ email, termsAgreement }));\n          // If we use selector, we will get stale confirmation data in store,\n          // using getState is the simplest fix for this\n          post(store.getState().subscription);\n        },\n      })}\n    </div>\n  );\n};\n\nexport default Confirmation;\n","import { useAppSelector } from '../state/hooks';\nimport { selectStage } from '../state/stateSlice';\nimport Selection from '../Selection';\nimport Payment from '../Payment';\nimport Confirmation from '../Confirmation';\nimport type { WithNavigation } from '../shared/types';\n\ntype Props = {} & WithNavigation;\nconst CurrentStage = ({ navigation }: Props) => {\n  const stage = useAppSelector(selectStage);\n  switch (stage) {\n    case 'selection':\n      return <Selection navigation={navigation} />;\n    case 'payment':\n      return <Payment navigation={navigation} />;\n    case 'confirmation':\n      return <Confirmation navigation={navigation} />;\n    default:\n      return null;\n  }\n};\n\nexport default CurrentStage;\n","import classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { nextStage, previousStage, selectStage } from '../state/stateSlice';\n\nconst defaultNextContent = (\n  <>\n    <span>Next</span>\n    <span className=\"icon is-small\">\n      <i className=\"fas fa-chevron-right\"></i>\n    </span>\n  </>\n);\n\nexport type Props = {\n  formFilled?: boolean;\n  onNext?: () => void;\n  onPrevious?: () => void;\n  nextButtonContent?: JSX.Element;\n  nextButtonLoading?: boolean;\n};\nconst Navigation = ({\n  formFilled = true,\n  onNext = () => {},\n  onPrevious = () => {},\n  nextButtonContent = defaultNextContent,\n  nextButtonLoading = false,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const stage = useAppSelector(selectStage);\n\n  return (\n    <div className=\"buttons is-justify-content-space-between mt-5\">\n      <button\n        className=\"button is-primary is-outlined\"\n        disabled={stage === 'selection'}\n        onClick={() => {\n          onPrevious();\n          dispatch(previousStage());\n        }}\n      >\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-chevron-left\"></i>\n        </span>\n        <span>Back</span>\n      </button>\n      <button\n        disabled={!formFilled}\n        className={classNames('button', 'is-primary', {\n          'is-loading': nextButtonLoading,\n        })}\n        onClick={() => {\n          onNext();\n          dispatch(nextStage());\n        }}\n      >\n        {nextButtonContent}\n      </button>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import './App.scss';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport SelectedPlan from './SelectedPlan';\nimport CurrentStage from './CurrentStage';\nimport Navigation from './Navigation';\n\nfunction App() {\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-6 is-5-desktop\">\n            <div className=\"has-text-centered\">\n              <h1 className=\"title is-2\">Cloud storage subscription</h1>\n            </div>\n            <SelectedPlan />\n            <CurrentStage navigation={(props) => <Navigation {...props} />} />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}